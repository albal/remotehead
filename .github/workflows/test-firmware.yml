name: Test Firmware on PR

on:
  pull_request:
    branches:
      - main
    paths:
      - 'main/**'
      - 'components/**'
      - 'test/**'
      - 'CMakeLists.txt'
      - 'sdkconfig'
  workflow_dispatch:

jobs:
  firmware-build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Build ESP32 firmware
      uses: espressif/esp-idf-ci-action@v1.2.0
      with:
        esp_idf_version: 'release-v5.4'
        command: |
          idf.py build

    - name: Install QEMU items
      uses: espressif/esp-idf-ci-action@v1.2.0
      with:
        esp_idf_version: 'release-v5.4'
        command: |
          . $IDF_PATH/export.sh
          python $IDF_PATH/tools/idf_tools.py install qemu-xtensa

    - name: Validate build artifacts
      run: |
        if [ ! -f build/remotehead.bin ]; then
          echo "Error: Firmware binary not found"
          exit 1
        fi
        echo "‚úÖ Firmware build successful"
        
        # Check binary size (warn if over 1MB)
        SIZE=$(stat -c%s build/remotehead.bin)
        SIZE_MB=$((SIZE / 1024 / 1024))
        echo "üìä Firmware size: ${SIZE} bytes (${SIZE_MB} MB)"
        if [ $SIZE -gt 1048576 ]; then
          echo "‚ö†Ô∏è  Warning: Firmware size is over 1MB"
        fi

  unit-tests:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Build and run unit tests
      uses: espressif/esp-idf-ci-action@v1.2.0
      with:
        esp_idf_version: 'release-v5.1'
        command: |
          # Navigate to test directory
          cd test
          
          # Build the test project
          echo "üî® Building unit tests..."
          idf.py build
          
          # Check if test binary was created
          if [ ! -f build/remotehead_test.bin ]; then
            echo "‚ùå Error: Test binary not found"
            exit 1
          fi
          
          echo "‚úÖ Unit tests built successfully"
          
          # For now, we can only build tests without hardware
          # TODO: Add QEMU or hardware-in-the-loop testing when available
          echo "üìã Unit test build completed. Tests ready for hardware execution."

  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run basic code quality checks
      run: |
        echo "üîç Checking for basic code quality issues..."
        
        # Check for common issues in main.c
        if grep -n "malloc(" main/main.c | grep -v "free("; then
          echo "‚ö†Ô∏è  Warning: Found malloc calls, ensure corresponding free() calls exist"
        fi
        
        # Check for potentially unsafe string functions
        if grep -n "strcpy\|strcat\|sprintf" main/main.c; then
          echo "‚ö†Ô∏è  Warning: Found potentially unsafe string functions. Consider using safe alternatives."
        fi
        
        # Check for TODO/FIXME comments
        if grep -n "TODO\|FIXME" main/main.c; then
          echo "üìù Found TODO/FIXME comments in code"
        fi
        
        # Basic syntax check by attempting to preprocess
        echo "üìã Running basic syntax validation..."
        # This is a simple check - the actual build is the real validation
        if ! grep -q "app_main" main/main.c; then
          echo "‚ùå Error: app_main function not found in main.c"
          exit 1
        fi
        
        # Check test files exist
        if [ ! -d "components/main_test" ]; then
          echo "‚ùå Error: Unit test directory not found"
          exit 1
        fi
        
        if [ ! -f "components/main_test/test_main.c" ]; then
          echo "‚ùå Error: Main test file not found"
          exit 1
        fi
        
        echo "‚úÖ Basic code quality checks completed"

    - name: Install QEMU
      run: |
        echo "Installing QEMU..."
        sudo apt-get update
        sudo apt-get install -y qemu-system-arm qemu-user
        echo "‚úÖ QEMU installation completed"

    - name: Run Tests in QEMU
      uses: espressif/esp-idf-ci-action@v1.2.0
      with:
        esp_idf_version: 'release-v5.4'
        command: |
          cd test
          idf.py build
          idf.py qemu
          echo "‚úÖ Tests executed in QEMU"

