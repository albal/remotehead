name: Build ESP32 Redialer

on:
  push:
    branches:
      - main # Trigger on pushes to the main branch
  workflow_dispatch: # Allows manual triggering from GitHub UI

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # --- Build React Application ---
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18' # Use a Node.js version compatible with your React app

    - name: Install React app dependencies
      run: npm install
      working-directory: ./react-app # Keep working-directory for npm install/build as it's a separate project

    - name: Build React app
      run: npm run build
      working-directory: ./react-app # Keep working-directory for npm install/build as it's a separate project

    # --- Copy React Build to ESP32 SPIFFS directory ---
    - name: Create ESP32 SPIFFS directory
      run: mkdir -p ./spiffs

    - name: Copy React build files to ESP32 SPIFFS directory
      run: |
        cp -r ./react-app/build/* ./spiffs/
        echo "Copied React build files to ESP32 SPIFFS directory."
        ls -R ./spiffs/ # List contents for verification

    # --- Prepare ESP32 Firmware Build Environment ---
    - name: Set up ESP-IDF and Build
      uses: espressif/esp-idf-ci-action@v1.2.0 # Use the official ESP-IDF action
      with:
        esp_idf_version: 'release-v5.1' # Specify your ESP-IDF version (e.g., release-v5.1, v5.0, master)
        command: 'idf.py build' # Build firmware (SPIFFS image created automatically)

    # --- Generate Combined Flashable Image ---
    - name: Create combined flashable binary
      uses: espressif/esp-idf-ci-action@v1.2.0
      with:
        esp_idf_version: 'release-v5.1'
        command: |
          # Use esptool from ESP-IDF to create combined binary
          # Path to generated binaries (relative to root directory)
          BOOTLOADER_BIN="build/bootloader/bootloader.bin"
          PARTITIONS_BIN="build/partition_table/partition-table.bin"
          APP_BIN="build/remotehead.bin"
          SPIFFS_IMG="build/spiffs.bin"
          
          # Define flash offsets based on partitions.csv
          BOOTLOADER_OFFSET="0x1000"
          PARTITIONS_OFFSET="0x8000"
          APP_OFFSET="0x10000"
          SPIFFS_OFFSET="0x190000"
          
          # Create combined flashable image using esptool from ESP-IDF
          python $IDF_PATH/components/esptool_py/esptool/esptool.py --chip esp32 merge_bin \
            -o "flash_image_combined.bin" \
            --flash_mode dio \
            --flash_freq 40m \
            --flash_size 4MB \
            ${BOOTLOADER_OFFSET} ${BOOTLOADER_BIN} \
            ${PARTITIONS_OFFSET} ${PARTITIONS_BIN} \
            ${APP_OFFSET} ${APP_BIN} \
            ${SPIFFS_OFFSET} ${SPIFFS_IMG}
          
          echo "Combined flashable binary created: flash_image_combined.bin"
          ls -la flash_image_combined.bin

    # --- Upload Build Artifacts ---
    - name: Upload ESP32 binaries
      uses: actions/upload-artifact@v4
      with:
        name: esp32-redialer-firmware
        path: |
          ./build/*.bin
          ./flash_image_combined.bin
        retention-days: 7 # Keep artifacts for 7 days
